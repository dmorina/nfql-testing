Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    exportInterface
    subTemplateList
    flowDirection
    tcpSynTotalCount
    postPacketDeltaCount
    applicationSubCategoryName
    exporterCertificate
    templateId
    userName
    distinctCountOfSourceIPv4Address
    digestHashValue
    egressInterface
    privateEnterpriseNumber
    confidenceLevel
    mplsTopLabelExp
    postNATSourceIPv4Address
    selectorId
    flowEndSeconds
    informationElementName
    tcpOptions
    exporterIPv4Address
    flowIdleTimeout
    flowLabelIPv6
    informationElementRangeBegin
    lineCardId
    hashDigestOutput
    rfc3550JitterMicroseconds
    responderOctets
    egressBroadcastPacketTotalCount
    applicationName
    informationElementUnits
    dot1qCustomerPriority
    exportTransportProtocol
    LPAREN
    samplingProbability
    flowStartDeltaMicroseconds
    postVlanId
    minFlowStartSeconds
    postNATSourceIPv6Address
    informationElementRangeEnd
    staIPv4Address
    wlanSSID
    informationElementDescription
    ignoredOctetTotalCount
    selectorIdTotalPktsSelected
    minFlowStartMicroseconds
    messageMD5Checksum
    subTemplateMultiList
    observationPointId
    selectorAlgorithm
    natPoolId
    metroEvcId
    exportProtocolVersion
    flowEndDeltaMicroseconds
    anonymizationTechnique
    interfaceDescription
    sourceMacAddress
    pseudoWireType
    collectionTimeMilliseconds
    droppedPacketDeltaCount
    bgpSourceAsNumber
    sourceIPv4Address
    flowEndNanoseconds
    packetDeltaCount
    notSentOctetTotalCount
    dataRecordsReliability
    selectionSequenceId
    sourceIPv4Prefix
    STRING
    postDot1qVlanId
    udpSourcePort
    droppedOctetTotalCount
    flowStartMilliseconds
    lowerCILimit
    tcpUrgTotalCount
    tcpUrgentPointer
    samplingPopulation
    octetDeltaCount
    icmpTypeCodeIPv4
    icmpTypeCodeIPv6
    VRFname
    ignoredPacketTotalCount
    observationTimeMicroseconds
    initiatorPackets
    classificationEngineId
    hashSelectedRangeMax
    connectionSumDuration
    postNATDestinationIPv4Address
    wtpMacAddress
    informationElementId
    collectorIPv4Address
    minFlowStartNanoseconds
    natPoolName
    maxFlowEndMilliseconds
    flowStartNanoseconds
    mplsPayloadPacketSection
    bgpPrevAdjacentAsNumber
    exportedMessageTotalCount
    destinationIPv4PrefixLength
    mplsTopLabelTTL
    natType
    destinationIPv6Address
    observationPointType
    distinctCountOfSourceIPv6Address
    octetDeltaSumOfSquares
    flowDurationMilliseconds
    notSentPacketTotalCount
    egressInterfaceType
    virtualStationName
    mplsLabelStackSection
    flowStartSeconds
    portRangeStart
    sourceIPv6Address
    ipPayloadPacketSection
    ingressUnicastPacketTotalCount
    totalLengthIPv4
    meteringProcessId
    applicationGroupName
    informationElementSemantics
    firewallEvent
    ethernetHeaderLength
    initiatorOctets
    tcpAcknowledgementNumber
    nextHeaderIPv6
    dataLinkFrameSize
    dot1qVlanId
    responderPackets
    ipv6ExtensionHeaders
    ipv4IHL
    distinctCountOfDestinationIPv4Address
    observationDomainName
    tcpFinTotalCount
    LCBRACKET
    exporterIPv6Address
    maximumIpTotalLength
    ipVersion
    portId
    isMulticast
    sourceIPv6PrefixLength
    minimumIpTotalLength
    selectorName
    informationElementIndex
    hashOutputRangeMax
    flowStartSysUpTime
    RCBRACKET
    fragmentOffset
    destinationIPv4Address
    opaqueOctets
    bgpNextHopIPv6Address
    ethernetPayloadLength
    postOctetDeltaCount
    maximumTTL
    postOctetTotalCount
    tcpControlBits
    mplsLabelStackLength
    wlanChannelId
    minExportSeconds
    igmpType
    exportingProcessId
    postIpClassOfService
    egressUnicastPacketTotalCount
    tcpWindowSize
    portRangeEnd
    tcpPshTotalCount
    exportSctpStreamId
    originalFlowsInitiated
    interfaceName
    monitoringIntervalEndMilliSeconds
    virtualStationInterfaceName
    hashSelectedRangeMin
    postPacketTotalCount
    distinctCountOfDestinationIPv6Address
    postIpPrecedence
    pseudoWireControlWord
    postIpDiffServCodePoint
    relativeError
    mplsLabelStackSection4
    observationTimeMilliseconds
    informationElementDataType
    minFlowStartMilliseconds
    monitoringIntervalStartMilliSeconds
    multicastReplicationFactor
    ipNextHopIPv4Address
    exportedOctetTotalCount
    ingressPhysicalInterface
    ipv4Options
    collectorTransportPort
    observationTimeSeconds
    ipTotalLength
    RPAREN
    ingressMulticastPacketTotalCount
    layer2OctetTotalCount
    observationTimeNanoseconds
    flowEndSysUpTime
    postDot1qCustomerVlanId
    postSourceMacAddress
    maxFlowEndNanoseconds
    samplingPacketInterval
    mplsLabelStackSection10
    ipDiffServCodePoint
    rtpSequenceNumber
    tcpSequenceNumber
    srcportKeyword
    pseudoWireId
    observationDomainId
    tcpRstTotalCount
    anonymizationFlags
    samplingPacketSpace
    samplingSize
    tcpAckTotalCount
    ipClassOfService
    ingressInterfaceType
    postNATDestinationIPv6Address
    paddingOctets
    postNAPTDestinationTransportPort
    flowKeyIndicator
    packetTotalCount
    flowEndReason
    ethernetType
    flowActiveTimeout
    ipPrecedence
    mplsVpnRouteDistinguisher
    p2pTechnology
    icmpCodeIPv4
    tcpSourcePort
    icmpCodeIPv6
    systemInitTimeMilliseconds
    egressVRFID
    hashIPPayloadOffset
    ipTTL
    destinationIPv4Prefix
    postMCastPacketTotalCount
    metroEvcType
    flowId
    natOriginatingAddressRealm
    protocolIdentifier
    tcpWindowScale
    valueDistributionMethod
    postDestinationMacAddress
    biflowDirection
    destinationTransportPort
    ethernetTotalLength
    portRangeStepSize
    mplsTopLabelStackSection
    mplsLabelStackSection8
    mplsLabelStackSection9
    mplsLabelStackSection6
    mplsLabelStackSection7
    greKey
    ipPayloadLength
    mplsLabelStackSection2
    mplsLabelStackSection3
    postMCastPacketDeltaCount
    natEvent
    vlanId
    octetTotalSumOfSquares
    connectionCountNew
    mplsLabelStackDepth
    encryptedTechnology
    ipHeaderPacketSection
    observedFlowTotalCount
    sessionScope
    egressPhysicalInterface
    dot1qCustomerVlanId
    maxFlowEndMicroseconds
    flowStartMicroseconds
    sourceIPv4PrefixLength
    ipNextHopIPv6Address
    samplingTimeInterval
    dataLinkFrameSection
    messageScope
    applicationCategoryName
    deltaFlowCount
    rfc3550JitterMilliseconds
    destinationMacAddress
    tcpHeaderLength
    minimumTTL
    mplsTopLabelType
    udpDestinationPort
    udpMessageLength
    IPSecSPI
    collectorIPv6Address
    icmpTypeIPv6
    icmpTypeIPv4
    commonPropertiesId
    virtualStationInterfaceId
    destinationIPv6PrefixLength
    portRangeNumPorts
    ingressBroadcastPacketTotalCount
    layer2SegmentId
    distinctCountOfSourceIPAddress
    bgpValidityState
    payloadLengthIPv6
    originalFlowsPresent
    layer2OctetDeltaCount
    ingressVRFID
    virtualStationUUID
    applicationId
    mplsLabelStackSection5
    flowEndMicroseconds
    flowDurationMicroseconds
    mplsTopLabelPrefixLength
    postMCastOctetTotalCount
    collectorCertificate
    bgpDestinationAsNumber
    tcpDestinationPort
    sourceTransportPort
    notSentFlowTotalCount
    maxExportSeconds
    distinctCountOfDestinationIPAddress
    flowEndMilliseconds
    basicList
    bgpNextAdjacentAsNumber
    absoluteError
    fragmentIdentification
    mplsTopLabelIPv6Address
    connectionTransactionId
    postNAPTSourceTransportPort
    hashOutputRangeMin
    exporterTransportPort
    postMplsTopLabelExp
    droppedPacketTotalCount
    samplingTimeSpace
    octetTotalCount
    destinationIPv6Prefix
    mplsTopLabelIPv4Address
    ipHeaderLength
    upperCILimit
    rfc3550JitterNanoseconds
    bgpNextHopIPv4Address
    selectorIdTotalPktsObserved
    fragmentFlags
    originalFlowsCompleted
    tunnelTechnology
    ingressInterface
    hashIPPayloadSize
    applicationDescription
    exportedFlowRecordTotalCount
    maxFlowEndSeconds
    sourceIPv6Prefix
    droppedOctetDeltaCount
    mplsPayloadLength
    postMCastOctetDeltaCount
    dot1qPriority
    staMacAddress
    hashInitialiserValue

Grammar

Rule 0     S' -> filter
Rule 1     filter -> filterKeyword id { filter_rule_1n }
Rule 2     filter_rule_1n -> filter_rule filter_rule_1n
Rule 3     filter_rule_1n -> <empty>
Rule 4     filter_rule -> or_rule
Rule 5     or_rule -> rule_or_not opt_rule
Rule 6     opt_rule -> <empty>
Rule 7     opt_rule -> ORKeyword rule_or_not opt_rule
Rule 8     rule_or_not -> rule
Rule 9     rule_or_not -> NOTKeyword rule
Rule 10    rule -> infix_rule
Rule 11    rule -> prefix_rule
Rule 12    infix_rule -> arg op arg
Rule 13    op -> EQ
Rule 14    op -> LT
Rule 15    op -> GT
Rule 16    op -> LTEQ
Rule 17    op -> GTEQ
Rule 18    op -> ML
Rule 19    op -> MG
Rule 20    op -> inKeyword
Rule 21    op -> notinKeyword
Rule 22    prefix_rule -> id ( args )
Rule 23    prefix_rule -> bitANDKeyword ( args )
Rule 24    prefix_rule -> bitORKeyword ( args )
Rule 25    args -> arg , args
Rule 26    args -> <empty>
Rule 27    arg -> id
Rule 28    arg -> IPv6
Rule 29    arg -> IPv4
Rule 30    arg -> CIDR
Rule 31    arg -> MAC
Rule 32    arg -> int
Rule 33    arg -> prefix_rule
Rule 34    CIDR -> IPv4 / int
Rule 35    CIDR -> IPv6 / int

Terminals, with rules where they appear

(                    : 22 23 24
)                    : 22 23 24
,                    : 25
/                    : 34 35
EQ                   : 13
GT                   : 15
GTEQ                 : 17
IPSecSPI             : 
IPv4                 : 29 34
IPv6                 : 28 35
LCBRACKET            : 
LPAREN               : 
LT                   : 14
LTEQ                 : 16
MAC                  : 31
MG                   : 19
ML                   : 18
NOTKeyword           : 9
ORKeyword            : 7
RCBRACKET            : 
RPAREN               : 
STRING               : 
VRFname              : 
absoluteError        : 
anonymizationFlags   : 
anonymizationTechnique : 
applicationCategoryName : 
applicationDescription : 
applicationGroupName : 
applicationId        : 
applicationName      : 
applicationSubCategoryName : 
basicList            : 
bgpDestinationAsNumber : 
bgpNextAdjacentAsNumber : 
bgpNextHopIPv4Address : 
bgpNextHopIPv6Address : 
bgpPrevAdjacentAsNumber : 
bgpSourceAsNumber    : 
bgpValidityState     : 
biflowDirection      : 
bitANDKeyword        : 23
bitORKeyword         : 24
classificationEngineId : 
collectionTimeMilliseconds : 
collectorCertificate : 
collectorIPv4Address : 
collectorIPv6Address : 
collectorTransportPort : 
commonPropertiesId   : 
confidenceLevel      : 
connectionCountNew   : 
connectionSumDuration : 
connectionTransactionId : 
dataLinkFrameSection : 
dataLinkFrameSize    : 
dataRecordsReliability : 
deltaFlowCount       : 
destinationIPv4Address : 
destinationIPv4Prefix : 
destinationIPv4PrefixLength : 
destinationIPv6Address : 
destinationIPv6Prefix : 
destinationIPv6PrefixLength : 
destinationMacAddress : 
destinationTransportPort : 
digestHashValue      : 
distinctCountOfDestinationIPAddress : 
distinctCountOfDestinationIPv4Address : 
distinctCountOfDestinationIPv6Address : 
distinctCountOfSourceIPAddress : 
distinctCountOfSourceIPv4Address : 
distinctCountOfSourceIPv6Address : 
dot1qCustomerPriority : 
dot1qCustomerVlanId  : 
dot1qPriority        : 
dot1qVlanId          : 
droppedOctetDeltaCount : 
droppedOctetTotalCount : 
droppedPacketDeltaCount : 
droppedPacketTotalCount : 
egressBroadcastPacketTotalCount : 
egressInterface      : 
egressInterfaceType  : 
egressPhysicalInterface : 
egressUnicastPacketTotalCount : 
egressVRFID          : 
encryptedTechnology  : 
error                : 
ethernetHeaderLength : 
ethernetPayloadLength : 
ethernetTotalLength  : 
ethernetType         : 
exportInterface      : 
exportProtocolVersion : 
exportSctpStreamId   : 
exportTransportProtocol : 
exportedFlowRecordTotalCount : 
exportedMessageTotalCount : 
exportedOctetTotalCount : 
exporterCertificate  : 
exporterIPv4Address  : 
exporterIPv6Address  : 
exporterTransportPort : 
exportingProcessId   : 
filterKeyword        : 1
firewallEvent        : 
flowActiveTimeout    : 
flowDirection        : 
flowDurationMicroseconds : 
flowDurationMilliseconds : 
flowEndDeltaMicroseconds : 
flowEndMicroseconds  : 
flowEndMilliseconds  : 
flowEndNanoseconds   : 
flowEndReason        : 
flowEndSeconds       : 
flowEndSysUpTime     : 
flowId               : 
flowIdleTimeout      : 
flowKeyIndicator     : 
flowLabelIPv6        : 
flowStartDeltaMicroseconds : 
flowStartMicroseconds : 
flowStartMilliseconds : 
flowStartNanoseconds : 
flowStartSeconds     : 
flowStartSysUpTime   : 
fragmentFlags        : 
fragmentIdentification : 
fragmentOffset       : 
greKey               : 
hashDigestOutput     : 
hashIPPayloadOffset  : 
hashIPPayloadSize    : 
hashInitialiserValue : 
hashOutputRangeMax   : 
hashOutputRangeMin   : 
hashSelectedRangeMax : 
hashSelectedRangeMin : 
icmpCodeIPv4         : 
icmpCodeIPv6         : 
icmpTypeCodeIPv4     : 
icmpTypeCodeIPv6     : 
icmpTypeIPv4         : 
icmpTypeIPv6         : 
id                   : 1 22 27
igmpType             : 
ignoredOctetTotalCount : 
ignoredPacketTotalCount : 
inKeyword            : 20
informationElementDataType : 
informationElementDescription : 
informationElementId : 
informationElementIndex : 
informationElementName : 
informationElementRangeBegin : 
informationElementRangeEnd : 
informationElementSemantics : 
informationElementUnits : 
ingressBroadcastPacketTotalCount : 
ingressInterface     : 
ingressInterfaceType : 
ingressMulticastPacketTotalCount : 
ingressPhysicalInterface : 
ingressUnicastPacketTotalCount : 
ingressVRFID         : 
initiatorOctets      : 
initiatorPackets     : 
int                  : 32 34 35
interfaceDescription : 
interfaceName        : 
ipClassOfService     : 
ipDiffServCodePoint  : 
ipHeaderLength       : 
ipHeaderPacketSection : 
ipNextHopIPv4Address : 
ipNextHopIPv6Address : 
ipPayloadLength      : 
ipPayloadPacketSection : 
ipPrecedence         : 
ipTTL                : 
ipTotalLength        : 
ipVersion            : 
ipv4IHL              : 
ipv4Options          : 
ipv6ExtensionHeaders : 
isMulticast          : 
layer2OctetDeltaCount : 
layer2OctetTotalCount : 
layer2SegmentId      : 
lineCardId           : 
lowerCILimit         : 
maxExportSeconds     : 
maxFlowEndMicroseconds : 
maxFlowEndMilliseconds : 
maxFlowEndNanoseconds : 
maxFlowEndSeconds    : 
maximumIpTotalLength : 
maximumTTL           : 
messageMD5Checksum   : 
messageScope         : 
meteringProcessId    : 
metroEvcId           : 
metroEvcType         : 
minExportSeconds     : 
minFlowStartMicroseconds : 
minFlowStartMilliseconds : 
minFlowStartNanoseconds : 
minFlowStartSeconds  : 
minimumIpTotalLength : 
minimumTTL           : 
monitoringIntervalEndMilliSeconds : 
monitoringIntervalStartMilliSeconds : 
mplsLabelStackDepth  : 
mplsLabelStackLength : 
mplsLabelStackSection : 
mplsLabelStackSection10 : 
mplsLabelStackSection2 : 
mplsLabelStackSection3 : 
mplsLabelStackSection4 : 
mplsLabelStackSection5 : 
mplsLabelStackSection6 : 
mplsLabelStackSection7 : 
mplsLabelStackSection8 : 
mplsLabelStackSection9 : 
mplsPayloadLength    : 
mplsPayloadPacketSection : 
mplsTopLabelExp      : 
mplsTopLabelIPv4Address : 
mplsTopLabelIPv6Address : 
mplsTopLabelPrefixLength : 
mplsTopLabelStackSection : 
mplsTopLabelTTL      : 
mplsTopLabelType     : 
mplsVpnRouteDistinguisher : 
multicastReplicationFactor : 
natEvent             : 
natOriginatingAddressRealm : 
natPoolId            : 
natPoolName          : 
natType              : 
nextHeaderIPv6       : 
notSentFlowTotalCount : 
notSentOctetTotalCount : 
notSentPacketTotalCount : 
notinKeyword         : 21
observationDomainId  : 
observationDomainName : 
observationPointId   : 
observationPointType : 
observationTimeMicroseconds : 
observationTimeMilliseconds : 
observationTimeNanoseconds : 
observationTimeSeconds : 
observedFlowTotalCount : 
octetDeltaCount      : 
octetDeltaSumOfSquares : 
octetTotalCount      : 
octetTotalSumOfSquares : 
opaqueOctets         : 
originalFlowsCompleted : 
originalFlowsInitiated : 
originalFlowsPresent : 
p2pTechnology        : 
packetDeltaCount     : 
packetTotalCount     : 
paddingOctets        : 
payloadLengthIPv6    : 
portId               : 
portRangeEnd         : 
portRangeNumPorts    : 
portRangeStart       : 
portRangeStepSize    : 
postDestinationMacAddress : 
postDot1qCustomerVlanId : 
postDot1qVlanId      : 
postIpClassOfService : 
postIpDiffServCodePoint : 
postIpPrecedence     : 
postMCastOctetDeltaCount : 
postMCastOctetTotalCount : 
postMCastPacketDeltaCount : 
postMCastPacketTotalCount : 
postMplsTopLabelExp  : 
postNAPTDestinationTransportPort : 
postNAPTSourceTransportPort : 
postNATDestinationIPv4Address : 
postNATDestinationIPv6Address : 
postNATSourceIPv4Address : 
postNATSourceIPv6Address : 
postOctetDeltaCount  : 
postOctetTotalCount  : 
postPacketDeltaCount : 
postPacketTotalCount : 
postSourceMacAddress : 
postVlanId           : 
privateEnterpriseNumber : 
protocolIdentifier   : 
pseudoWireControlWord : 
pseudoWireId         : 
pseudoWireType       : 
relativeError        : 
responderOctets      : 
responderPackets     : 
rfc3550JitterMicroseconds : 
rfc3550JitterMilliseconds : 
rfc3550JitterNanoseconds : 
rtpSequenceNumber    : 
samplingPacketInterval : 
samplingPacketSpace  : 
samplingPopulation   : 
samplingProbability  : 
samplingSize         : 
samplingTimeInterval : 
samplingTimeSpace    : 
selectionSequenceId  : 
selectorAlgorithm    : 
selectorId           : 
selectorIdTotalPktsObserved : 
selectorIdTotalPktsSelected : 
selectorName         : 
sessionScope         : 
sourceIPv4Address    : 
sourceIPv4Prefix     : 
sourceIPv4PrefixLength : 
sourceIPv6Address    : 
sourceIPv6Prefix     : 
sourceIPv6PrefixLength : 
sourceMacAddress     : 
sourceTransportPort  : 
srcportKeyword       : 
staIPv4Address       : 
staMacAddress        : 
subTemplateList      : 
subTemplateMultiList : 
systemInitTimeMilliseconds : 
tcpAckTotalCount     : 
tcpAcknowledgementNumber : 
tcpControlBits       : 
tcpDestinationPort   : 
tcpFinTotalCount     : 
tcpHeaderLength      : 
tcpOptions           : 
tcpPshTotalCount     : 
tcpRstTotalCount     : 
tcpSequenceNumber    : 
tcpSourcePort        : 
tcpSynTotalCount     : 
tcpUrgTotalCount     : 
tcpUrgentPointer     : 
tcpWindowScale       : 
tcpWindowSize        : 
templateId           : 
totalLengthIPv4      : 
tunnelTechnology     : 
udpDestinationPort   : 
udpMessageLength     : 
udpSourcePort        : 
upperCILimit         : 
userName             : 
valueDistributionMethod : 
virtualStationInterfaceId : 
virtualStationInterfaceName : 
virtualStationName   : 
virtualStationUUID   : 
vlanId               : 
wlanChannelId        : 
wlanSSID             : 
wtpMacAddress        : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

CIDR                 : 30
arg                  : 12 12 25
args                 : 22 23 24 25
filter               : 0
filter_rule          : 2
filter_rule_1n       : 1 2
infix_rule           : 10
op                   : 12
opt_rule             : 5 7
or_rule              : 4
prefix_rule          : 11 33
rule                 : 8 9
rule_or_not          : 5 7

Parsing method: LALR

state 0

    (0) S' -> . filter
    (1) filter -> . filterKeyword id { filter_rule_1n }

    filterKeyword   shift and go to state 2

    filter                         shift and go to state 1

state 1

    (0) S' -> filter .



state 2

    (1) filter -> filterKeyword . id { filter_rule_1n }

    id              shift and go to state 3


state 3

    (1) filter -> filterKeyword id . { filter_rule_1n }

    {               shift and go to state 4


state 4

    (1) filter -> filterKeyword id { . filter_rule_1n }
    (2) filter_rule_1n -> . filter_rule filter_rule_1n
    (3) filter_rule_1n -> .
    (4) filter_rule -> . or_rule
    (5) or_rule -> . rule_or_not opt_rule
    (8) rule_or_not -> . rule
    (9) rule_or_not -> . NOTKeyword rule
    (10) rule -> . infix_rule
    (11) rule -> . prefix_rule
    (12) infix_rule -> . arg op arg
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int

    }               reduce using rule 3 (filter_rule_1n -> .)
    NOTKeyword      shift and go to state 20
    id              shift and go to state 11
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19

    CIDR                           shift and go to state 6
    or_rule                        shift and go to state 16
    prefix_rule                    shift and go to state 9
    filter_rule                    shift and go to state 10
    rule_or_not                    shift and go to state 13
    arg                            shift and go to state 12
    filter_rule_1n                 shift and go to state 7
    rule                           shift and go to state 21
    infix_rule                     shift and go to state 14

state 5

    (29) arg -> IPv4 .
    (34) CIDR -> IPv4 . / int

    ,               reduce using rule 29 (arg -> IPv4 .)
    EQ              reduce using rule 29 (arg -> IPv4 .)
    LT              reduce using rule 29 (arg -> IPv4 .)
    GT              reduce using rule 29 (arg -> IPv4 .)
    LTEQ            reduce using rule 29 (arg -> IPv4 .)
    GTEQ            reduce using rule 29 (arg -> IPv4 .)
    ML              reduce using rule 29 (arg -> IPv4 .)
    MG              reduce using rule 29 (arg -> IPv4 .)
    inKeyword       reduce using rule 29 (arg -> IPv4 .)
    notinKeyword    reduce using rule 29 (arg -> IPv4 .)
    ORKeyword       reduce using rule 29 (arg -> IPv4 .)
    NOTKeyword      reduce using rule 29 (arg -> IPv4 .)
    id              reduce using rule 29 (arg -> IPv4 .)
    bitANDKeyword   reduce using rule 29 (arg -> IPv4 .)
    bitORKeyword    reduce using rule 29 (arg -> IPv4 .)
    IPv6            reduce using rule 29 (arg -> IPv4 .)
    IPv4            reduce using rule 29 (arg -> IPv4 .)
    MAC             reduce using rule 29 (arg -> IPv4 .)
    int             reduce using rule 29 (arg -> IPv4 .)
    }               reduce using rule 29 (arg -> IPv4 .)
    /               shift and go to state 22


state 6

    (30) arg -> CIDR .

    ,               reduce using rule 30 (arg -> CIDR .)
    EQ              reduce using rule 30 (arg -> CIDR .)
    LT              reduce using rule 30 (arg -> CIDR .)
    GT              reduce using rule 30 (arg -> CIDR .)
    LTEQ            reduce using rule 30 (arg -> CIDR .)
    GTEQ            reduce using rule 30 (arg -> CIDR .)
    ML              reduce using rule 30 (arg -> CIDR .)
    MG              reduce using rule 30 (arg -> CIDR .)
    inKeyword       reduce using rule 30 (arg -> CIDR .)
    notinKeyword    reduce using rule 30 (arg -> CIDR .)
    ORKeyword       reduce using rule 30 (arg -> CIDR .)
    NOTKeyword      reduce using rule 30 (arg -> CIDR .)
    id              reduce using rule 30 (arg -> CIDR .)
    bitANDKeyword   reduce using rule 30 (arg -> CIDR .)
    bitORKeyword    reduce using rule 30 (arg -> CIDR .)
    IPv6            reduce using rule 30 (arg -> CIDR .)
    IPv4            reduce using rule 30 (arg -> CIDR .)
    MAC             reduce using rule 30 (arg -> CIDR .)
    int             reduce using rule 30 (arg -> CIDR .)
    }               reduce using rule 30 (arg -> CIDR .)


state 7

    (1) filter -> filterKeyword id { filter_rule_1n . }

    }               shift and go to state 23


state 8

    (31) arg -> MAC .

    ,               reduce using rule 31 (arg -> MAC .)
    EQ              reduce using rule 31 (arg -> MAC .)
    LT              reduce using rule 31 (arg -> MAC .)
    GT              reduce using rule 31 (arg -> MAC .)
    LTEQ            reduce using rule 31 (arg -> MAC .)
    GTEQ            reduce using rule 31 (arg -> MAC .)
    ML              reduce using rule 31 (arg -> MAC .)
    MG              reduce using rule 31 (arg -> MAC .)
    inKeyword       reduce using rule 31 (arg -> MAC .)
    notinKeyword    reduce using rule 31 (arg -> MAC .)
    ORKeyword       reduce using rule 31 (arg -> MAC .)
    NOTKeyword      reduce using rule 31 (arg -> MAC .)
    id              reduce using rule 31 (arg -> MAC .)
    bitANDKeyword   reduce using rule 31 (arg -> MAC .)
    bitORKeyword    reduce using rule 31 (arg -> MAC .)
    IPv6            reduce using rule 31 (arg -> MAC .)
    IPv4            reduce using rule 31 (arg -> MAC .)
    MAC             reduce using rule 31 (arg -> MAC .)
    int             reduce using rule 31 (arg -> MAC .)
    }               reduce using rule 31 (arg -> MAC .)


state 9

    (11) rule -> prefix_rule .
    (33) arg -> prefix_rule .

    ORKeyword       reduce using rule 11 (rule -> prefix_rule .)
    NOTKeyword      reduce using rule 11 (rule -> prefix_rule .)
    id              reduce using rule 11 (rule -> prefix_rule .)
    bitANDKeyword   reduce using rule 11 (rule -> prefix_rule .)
    bitORKeyword    reduce using rule 11 (rule -> prefix_rule .)
    IPv6            reduce using rule 11 (rule -> prefix_rule .)
    IPv4            reduce using rule 11 (rule -> prefix_rule .)
    MAC             reduce using rule 11 (rule -> prefix_rule .)
    int             reduce using rule 11 (rule -> prefix_rule .)
    }               reduce using rule 11 (rule -> prefix_rule .)
    EQ              reduce using rule 33 (arg -> prefix_rule .)
    LT              reduce using rule 33 (arg -> prefix_rule .)
    GT              reduce using rule 33 (arg -> prefix_rule .)
    LTEQ            reduce using rule 33 (arg -> prefix_rule .)
    GTEQ            reduce using rule 33 (arg -> prefix_rule .)
    ML              reduce using rule 33 (arg -> prefix_rule .)
    MG              reduce using rule 33 (arg -> prefix_rule .)
    inKeyword       reduce using rule 33 (arg -> prefix_rule .)
    notinKeyword    reduce using rule 33 (arg -> prefix_rule .)


state 10

    (2) filter_rule_1n -> filter_rule . filter_rule_1n
    (2) filter_rule_1n -> . filter_rule filter_rule_1n
    (3) filter_rule_1n -> .
    (4) filter_rule -> . or_rule
    (5) or_rule -> . rule_or_not opt_rule
    (8) rule_or_not -> . rule
    (9) rule_or_not -> . NOTKeyword rule
    (10) rule -> . infix_rule
    (11) rule -> . prefix_rule
    (12) infix_rule -> . arg op arg
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int

    }               reduce using rule 3 (filter_rule_1n -> .)
    NOTKeyword      shift and go to state 20
    id              shift and go to state 11
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19

    CIDR                           shift and go to state 6
    or_rule                        shift and go to state 16
    prefix_rule                    shift and go to state 9
    filter_rule                    shift and go to state 10
    rule_or_not                    shift and go to state 13
    arg                            shift and go to state 12
    filter_rule_1n                 shift and go to state 24
    rule                           shift and go to state 21
    infix_rule                     shift and go to state 14

state 11

    (22) prefix_rule -> id . ( args )
    (27) arg -> id .

    (               shift and go to state 25
    EQ              reduce using rule 27 (arg -> id .)
    LT              reduce using rule 27 (arg -> id .)
    GT              reduce using rule 27 (arg -> id .)
    LTEQ            reduce using rule 27 (arg -> id .)
    GTEQ            reduce using rule 27 (arg -> id .)
    ML              reduce using rule 27 (arg -> id .)
    MG              reduce using rule 27 (arg -> id .)
    inKeyword       reduce using rule 27 (arg -> id .)
    notinKeyword    reduce using rule 27 (arg -> id .)


state 12

    (12) infix_rule -> arg . op arg
    (13) op -> . EQ
    (14) op -> . LT
    (15) op -> . GT
    (16) op -> . LTEQ
    (17) op -> . GTEQ
    (18) op -> . ML
    (19) op -> . MG
    (20) op -> . inKeyword
    (21) op -> . notinKeyword

    EQ              shift and go to state 26
    LT              shift and go to state 33
    GT              shift and go to state 32
    LTEQ            shift and go to state 35
    GTEQ            shift and go to state 27
    ML              shift and go to state 29
    MG              shift and go to state 34
    inKeyword       shift and go to state 28
    notinKeyword    shift and go to state 30

    op                             shift and go to state 31

state 13

    (5) or_rule -> rule_or_not . opt_rule
    (6) opt_rule -> .
    (7) opt_rule -> . ORKeyword rule_or_not opt_rule

    NOTKeyword      reduce using rule 6 (opt_rule -> .)
    id              reduce using rule 6 (opt_rule -> .)
    bitANDKeyword   reduce using rule 6 (opt_rule -> .)
    bitORKeyword    reduce using rule 6 (opt_rule -> .)
    IPv6            reduce using rule 6 (opt_rule -> .)
    IPv4            reduce using rule 6 (opt_rule -> .)
    MAC             reduce using rule 6 (opt_rule -> .)
    int             reduce using rule 6 (opt_rule -> .)
    }               reduce using rule 6 (opt_rule -> .)
    ORKeyword       shift and go to state 37

    opt_rule                       shift and go to state 36

state 14

    (10) rule -> infix_rule .

    ORKeyword       reduce using rule 10 (rule -> infix_rule .)
    NOTKeyword      reduce using rule 10 (rule -> infix_rule .)
    id              reduce using rule 10 (rule -> infix_rule .)
    bitANDKeyword   reduce using rule 10 (rule -> infix_rule .)
    bitORKeyword    reduce using rule 10 (rule -> infix_rule .)
    IPv6            reduce using rule 10 (rule -> infix_rule .)
    IPv4            reduce using rule 10 (rule -> infix_rule .)
    MAC             reduce using rule 10 (rule -> infix_rule .)
    int             reduce using rule 10 (rule -> infix_rule .)
    }               reduce using rule 10 (rule -> infix_rule .)


state 15

    (23) prefix_rule -> bitANDKeyword . ( args )

    (               shift and go to state 38


state 16

    (4) filter_rule -> or_rule .

    NOTKeyword      reduce using rule 4 (filter_rule -> or_rule .)
    id              reduce using rule 4 (filter_rule -> or_rule .)
    bitANDKeyword   reduce using rule 4 (filter_rule -> or_rule .)
    bitORKeyword    reduce using rule 4 (filter_rule -> or_rule .)
    IPv6            reduce using rule 4 (filter_rule -> or_rule .)
    IPv4            reduce using rule 4 (filter_rule -> or_rule .)
    MAC             reduce using rule 4 (filter_rule -> or_rule .)
    int             reduce using rule 4 (filter_rule -> or_rule .)
    }               reduce using rule 4 (filter_rule -> or_rule .)


state 17

    (28) arg -> IPv6 .
    (35) CIDR -> IPv6 . / int

    ,               reduce using rule 28 (arg -> IPv6 .)
    EQ              reduce using rule 28 (arg -> IPv6 .)
    LT              reduce using rule 28 (arg -> IPv6 .)
    GT              reduce using rule 28 (arg -> IPv6 .)
    LTEQ            reduce using rule 28 (arg -> IPv6 .)
    GTEQ            reduce using rule 28 (arg -> IPv6 .)
    ML              reduce using rule 28 (arg -> IPv6 .)
    MG              reduce using rule 28 (arg -> IPv6 .)
    inKeyword       reduce using rule 28 (arg -> IPv6 .)
    notinKeyword    reduce using rule 28 (arg -> IPv6 .)
    ORKeyword       reduce using rule 28 (arg -> IPv6 .)
    NOTKeyword      reduce using rule 28 (arg -> IPv6 .)
    id              reduce using rule 28 (arg -> IPv6 .)
    bitANDKeyword   reduce using rule 28 (arg -> IPv6 .)
    bitORKeyword    reduce using rule 28 (arg -> IPv6 .)
    IPv6            reduce using rule 28 (arg -> IPv6 .)
    IPv4            reduce using rule 28 (arg -> IPv6 .)
    MAC             reduce using rule 28 (arg -> IPv6 .)
    int             reduce using rule 28 (arg -> IPv6 .)
    }               reduce using rule 28 (arg -> IPv6 .)
    /               shift and go to state 39


state 18

    (24) prefix_rule -> bitORKeyword . ( args )

    (               shift and go to state 40


state 19

    (32) arg -> int .

    ,               reduce using rule 32 (arg -> int .)
    EQ              reduce using rule 32 (arg -> int .)
    LT              reduce using rule 32 (arg -> int .)
    GT              reduce using rule 32 (arg -> int .)
    LTEQ            reduce using rule 32 (arg -> int .)
    GTEQ            reduce using rule 32 (arg -> int .)
    ML              reduce using rule 32 (arg -> int .)
    MG              reduce using rule 32 (arg -> int .)
    inKeyword       reduce using rule 32 (arg -> int .)
    notinKeyword    reduce using rule 32 (arg -> int .)
    ORKeyword       reduce using rule 32 (arg -> int .)
    NOTKeyword      reduce using rule 32 (arg -> int .)
    id              reduce using rule 32 (arg -> int .)
    bitANDKeyword   reduce using rule 32 (arg -> int .)
    bitORKeyword    reduce using rule 32 (arg -> int .)
    IPv6            reduce using rule 32 (arg -> int .)
    IPv4            reduce using rule 32 (arg -> int .)
    MAC             reduce using rule 32 (arg -> int .)
    int             reduce using rule 32 (arg -> int .)
    }               reduce using rule 32 (arg -> int .)


state 20

    (9) rule_or_not -> NOTKeyword . rule
    (10) rule -> . infix_rule
    (11) rule -> . prefix_rule
    (12) infix_rule -> . arg op arg
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int

    id              shift and go to state 11
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19

    CIDR                           shift and go to state 6
    arg                            shift and go to state 12
    prefix_rule                    shift and go to state 9
    rule                           shift and go to state 41
    infix_rule                     shift and go to state 14

state 21

    (8) rule_or_not -> rule .

    ORKeyword       reduce using rule 8 (rule_or_not -> rule .)
    NOTKeyword      reduce using rule 8 (rule_or_not -> rule .)
    id              reduce using rule 8 (rule_or_not -> rule .)
    bitANDKeyword   reduce using rule 8 (rule_or_not -> rule .)
    bitORKeyword    reduce using rule 8 (rule_or_not -> rule .)
    IPv6            reduce using rule 8 (rule_or_not -> rule .)
    IPv4            reduce using rule 8 (rule_or_not -> rule .)
    MAC             reduce using rule 8 (rule_or_not -> rule .)
    int             reduce using rule 8 (rule_or_not -> rule .)
    }               reduce using rule 8 (rule_or_not -> rule .)


state 22

    (34) CIDR -> IPv4 / . int

    int             shift and go to state 42


state 23

    (1) filter -> filterKeyword id { filter_rule_1n } .

    $end            reduce using rule 1 (filter -> filterKeyword id { filter_rule_1n } .)


state 24

    (2) filter_rule_1n -> filter_rule filter_rule_1n .

    }               reduce using rule 2 (filter_rule_1n -> filter_rule filter_rule_1n .)


state 25

    (22) prefix_rule -> id ( . args )
    (25) args -> . arg , args
    (26) args -> .
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )

    )               reduce using rule 26 (args -> .)
    id              shift and go to state 45
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18

    arg                            shift and go to state 46
    prefix_rule                    shift and go to state 44
    CIDR                           shift and go to state 6
    args                           shift and go to state 43

state 26

    (13) op -> EQ .

    id              reduce using rule 13 (op -> EQ .)
    IPv6            reduce using rule 13 (op -> EQ .)
    IPv4            reduce using rule 13 (op -> EQ .)
    MAC             reduce using rule 13 (op -> EQ .)
    int             reduce using rule 13 (op -> EQ .)
    bitANDKeyword   reduce using rule 13 (op -> EQ .)
    bitORKeyword    reduce using rule 13 (op -> EQ .)


state 27

    (17) op -> GTEQ .

    id              reduce using rule 17 (op -> GTEQ .)
    IPv6            reduce using rule 17 (op -> GTEQ .)
    IPv4            reduce using rule 17 (op -> GTEQ .)
    MAC             reduce using rule 17 (op -> GTEQ .)
    int             reduce using rule 17 (op -> GTEQ .)
    bitANDKeyword   reduce using rule 17 (op -> GTEQ .)
    bitORKeyword    reduce using rule 17 (op -> GTEQ .)


state 28

    (20) op -> inKeyword .

    id              reduce using rule 20 (op -> inKeyword .)
    IPv6            reduce using rule 20 (op -> inKeyword .)
    IPv4            reduce using rule 20 (op -> inKeyword .)
    MAC             reduce using rule 20 (op -> inKeyword .)
    int             reduce using rule 20 (op -> inKeyword .)
    bitANDKeyword   reduce using rule 20 (op -> inKeyword .)
    bitORKeyword    reduce using rule 20 (op -> inKeyword .)


state 29

    (18) op -> ML .

    id              reduce using rule 18 (op -> ML .)
    IPv6            reduce using rule 18 (op -> ML .)
    IPv4            reduce using rule 18 (op -> ML .)
    MAC             reduce using rule 18 (op -> ML .)
    int             reduce using rule 18 (op -> ML .)
    bitANDKeyword   reduce using rule 18 (op -> ML .)
    bitORKeyword    reduce using rule 18 (op -> ML .)


state 30

    (21) op -> notinKeyword .

    id              reduce using rule 21 (op -> notinKeyword .)
    IPv6            reduce using rule 21 (op -> notinKeyword .)
    IPv4            reduce using rule 21 (op -> notinKeyword .)
    MAC             reduce using rule 21 (op -> notinKeyword .)
    int             reduce using rule 21 (op -> notinKeyword .)
    bitANDKeyword   reduce using rule 21 (op -> notinKeyword .)
    bitORKeyword    reduce using rule 21 (op -> notinKeyword .)


state 31

    (12) infix_rule -> arg op . arg
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )

    id              shift and go to state 45
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18

    arg                            shift and go to state 47
    prefix_rule                    shift and go to state 44
    CIDR                           shift and go to state 6

state 32

    (15) op -> GT .

    id              reduce using rule 15 (op -> GT .)
    IPv6            reduce using rule 15 (op -> GT .)
    IPv4            reduce using rule 15 (op -> GT .)
    MAC             reduce using rule 15 (op -> GT .)
    int             reduce using rule 15 (op -> GT .)
    bitANDKeyword   reduce using rule 15 (op -> GT .)
    bitORKeyword    reduce using rule 15 (op -> GT .)


state 33

    (14) op -> LT .

    id              reduce using rule 14 (op -> LT .)
    IPv6            reduce using rule 14 (op -> LT .)
    IPv4            reduce using rule 14 (op -> LT .)
    MAC             reduce using rule 14 (op -> LT .)
    int             reduce using rule 14 (op -> LT .)
    bitANDKeyword   reduce using rule 14 (op -> LT .)
    bitORKeyword    reduce using rule 14 (op -> LT .)


state 34

    (19) op -> MG .

    id              reduce using rule 19 (op -> MG .)
    IPv6            reduce using rule 19 (op -> MG .)
    IPv4            reduce using rule 19 (op -> MG .)
    MAC             reduce using rule 19 (op -> MG .)
    int             reduce using rule 19 (op -> MG .)
    bitANDKeyword   reduce using rule 19 (op -> MG .)
    bitORKeyword    reduce using rule 19 (op -> MG .)


state 35

    (16) op -> LTEQ .

    id              reduce using rule 16 (op -> LTEQ .)
    IPv6            reduce using rule 16 (op -> LTEQ .)
    IPv4            reduce using rule 16 (op -> LTEQ .)
    MAC             reduce using rule 16 (op -> LTEQ .)
    int             reduce using rule 16 (op -> LTEQ .)
    bitANDKeyword   reduce using rule 16 (op -> LTEQ .)
    bitORKeyword    reduce using rule 16 (op -> LTEQ .)


state 36

    (5) or_rule -> rule_or_not opt_rule .

    NOTKeyword      reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    id              reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    bitANDKeyword   reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    bitORKeyword    reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    IPv6            reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    IPv4            reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    MAC             reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    int             reduce using rule 5 (or_rule -> rule_or_not opt_rule .)
    }               reduce using rule 5 (or_rule -> rule_or_not opt_rule .)


state 37

    (7) opt_rule -> ORKeyword . rule_or_not opt_rule
    (8) rule_or_not -> . rule
    (9) rule_or_not -> . NOTKeyword rule
    (10) rule -> . infix_rule
    (11) rule -> . prefix_rule
    (12) infix_rule -> . arg op arg
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int

    NOTKeyword      shift and go to state 20
    id              shift and go to state 11
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19

    CIDR                           shift and go to state 6
    rule_or_not                    shift and go to state 48
    prefix_rule                    shift and go to state 9
    arg                            shift and go to state 12
    rule                           shift and go to state 21
    infix_rule                     shift and go to state 14

state 38

    (23) prefix_rule -> bitANDKeyword ( . args )
    (25) args -> . arg , args
    (26) args -> .
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )

    )               reduce using rule 26 (args -> .)
    id              shift and go to state 45
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18

    arg                            shift and go to state 46
    prefix_rule                    shift and go to state 44
    CIDR                           shift and go to state 6
    args                           shift and go to state 49

state 39

    (35) CIDR -> IPv6 / . int

    int             shift and go to state 50


state 40

    (24) prefix_rule -> bitORKeyword ( . args )
    (25) args -> . arg , args
    (26) args -> .
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )

    )               reduce using rule 26 (args -> .)
    id              shift and go to state 45
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18

    arg                            shift and go to state 46
    prefix_rule                    shift and go to state 44
    CIDR                           shift and go to state 6
    args                           shift and go to state 51

state 41

    (9) rule_or_not -> NOTKeyword rule .

    ORKeyword       reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    NOTKeyword      reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    id              reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    bitANDKeyword   reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    bitORKeyword    reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    IPv6            reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    IPv4            reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    MAC             reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    int             reduce using rule 9 (rule_or_not -> NOTKeyword rule .)
    }               reduce using rule 9 (rule_or_not -> NOTKeyword rule .)


state 42

    (34) CIDR -> IPv4 / int .

    EQ              reduce using rule 34 (CIDR -> IPv4 / int .)
    LT              reduce using rule 34 (CIDR -> IPv4 / int .)
    GT              reduce using rule 34 (CIDR -> IPv4 / int .)
    LTEQ            reduce using rule 34 (CIDR -> IPv4 / int .)
    GTEQ            reduce using rule 34 (CIDR -> IPv4 / int .)
    ML              reduce using rule 34 (CIDR -> IPv4 / int .)
    MG              reduce using rule 34 (CIDR -> IPv4 / int .)
    inKeyword       reduce using rule 34 (CIDR -> IPv4 / int .)
    notinKeyword    reduce using rule 34 (CIDR -> IPv4 / int .)
    ,               reduce using rule 34 (CIDR -> IPv4 / int .)
    ORKeyword       reduce using rule 34 (CIDR -> IPv4 / int .)
    NOTKeyword      reduce using rule 34 (CIDR -> IPv4 / int .)
    id              reduce using rule 34 (CIDR -> IPv4 / int .)
    bitANDKeyword   reduce using rule 34 (CIDR -> IPv4 / int .)
    bitORKeyword    reduce using rule 34 (CIDR -> IPv4 / int .)
    IPv6            reduce using rule 34 (CIDR -> IPv4 / int .)
    IPv4            reduce using rule 34 (CIDR -> IPv4 / int .)
    MAC             reduce using rule 34 (CIDR -> IPv4 / int .)
    int             reduce using rule 34 (CIDR -> IPv4 / int .)
    }               reduce using rule 34 (CIDR -> IPv4 / int .)


state 43

    (22) prefix_rule -> id ( args . )

    )               shift and go to state 52


state 44

    (33) arg -> prefix_rule .

    ,               reduce using rule 33 (arg -> prefix_rule .)
    ORKeyword       reduce using rule 33 (arg -> prefix_rule .)
    NOTKeyword      reduce using rule 33 (arg -> prefix_rule .)
    id              reduce using rule 33 (arg -> prefix_rule .)
    bitANDKeyword   reduce using rule 33 (arg -> prefix_rule .)
    bitORKeyword    reduce using rule 33 (arg -> prefix_rule .)
    IPv6            reduce using rule 33 (arg -> prefix_rule .)
    IPv4            reduce using rule 33 (arg -> prefix_rule .)
    MAC             reduce using rule 33 (arg -> prefix_rule .)
    int             reduce using rule 33 (arg -> prefix_rule .)
    }               reduce using rule 33 (arg -> prefix_rule .)


state 45

    (27) arg -> id .
    (22) prefix_rule -> id . ( args )

    ,               reduce using rule 27 (arg -> id .)
    ORKeyword       reduce using rule 27 (arg -> id .)
    NOTKeyword      reduce using rule 27 (arg -> id .)
    id              reduce using rule 27 (arg -> id .)
    bitANDKeyword   reduce using rule 27 (arg -> id .)
    bitORKeyword    reduce using rule 27 (arg -> id .)
    IPv6            reduce using rule 27 (arg -> id .)
    IPv4            reduce using rule 27 (arg -> id .)
    MAC             reduce using rule 27 (arg -> id .)
    int             reduce using rule 27 (arg -> id .)
    }               reduce using rule 27 (arg -> id .)
    (               shift and go to state 25


state 46

    (25) args -> arg . , args

    ,               shift and go to state 53


state 47

    (12) infix_rule -> arg op arg .

    ORKeyword       reduce using rule 12 (infix_rule -> arg op arg .)
    NOTKeyword      reduce using rule 12 (infix_rule -> arg op arg .)
    id              reduce using rule 12 (infix_rule -> arg op arg .)
    bitANDKeyword   reduce using rule 12 (infix_rule -> arg op arg .)
    bitORKeyword    reduce using rule 12 (infix_rule -> arg op arg .)
    IPv6            reduce using rule 12 (infix_rule -> arg op arg .)
    IPv4            reduce using rule 12 (infix_rule -> arg op arg .)
    MAC             reduce using rule 12 (infix_rule -> arg op arg .)
    int             reduce using rule 12 (infix_rule -> arg op arg .)
    }               reduce using rule 12 (infix_rule -> arg op arg .)


state 48

    (7) opt_rule -> ORKeyword rule_or_not . opt_rule
    (6) opt_rule -> .
    (7) opt_rule -> . ORKeyword rule_or_not opt_rule

    NOTKeyword      reduce using rule 6 (opt_rule -> .)
    id              reduce using rule 6 (opt_rule -> .)
    bitANDKeyword   reduce using rule 6 (opt_rule -> .)
    bitORKeyword    reduce using rule 6 (opt_rule -> .)
    IPv6            reduce using rule 6 (opt_rule -> .)
    IPv4            reduce using rule 6 (opt_rule -> .)
    MAC             reduce using rule 6 (opt_rule -> .)
    int             reduce using rule 6 (opt_rule -> .)
    }               reduce using rule 6 (opt_rule -> .)
    ORKeyword       shift and go to state 37

    opt_rule                       shift and go to state 54

state 49

    (23) prefix_rule -> bitANDKeyword ( args . )

    )               shift and go to state 55


state 50

    (35) CIDR -> IPv6 / int .

    EQ              reduce using rule 35 (CIDR -> IPv6 / int .)
    LT              reduce using rule 35 (CIDR -> IPv6 / int .)
    GT              reduce using rule 35 (CIDR -> IPv6 / int .)
    LTEQ            reduce using rule 35 (CIDR -> IPv6 / int .)
    GTEQ            reduce using rule 35 (CIDR -> IPv6 / int .)
    ML              reduce using rule 35 (CIDR -> IPv6 / int .)
    MG              reduce using rule 35 (CIDR -> IPv6 / int .)
    inKeyword       reduce using rule 35 (CIDR -> IPv6 / int .)
    notinKeyword    reduce using rule 35 (CIDR -> IPv6 / int .)
    ,               reduce using rule 35 (CIDR -> IPv6 / int .)
    ORKeyword       reduce using rule 35 (CIDR -> IPv6 / int .)
    NOTKeyword      reduce using rule 35 (CIDR -> IPv6 / int .)
    id              reduce using rule 35 (CIDR -> IPv6 / int .)
    bitANDKeyword   reduce using rule 35 (CIDR -> IPv6 / int .)
    bitORKeyword    reduce using rule 35 (CIDR -> IPv6 / int .)
    IPv6            reduce using rule 35 (CIDR -> IPv6 / int .)
    IPv4            reduce using rule 35 (CIDR -> IPv6 / int .)
    MAC             reduce using rule 35 (CIDR -> IPv6 / int .)
    int             reduce using rule 35 (CIDR -> IPv6 / int .)
    }               reduce using rule 35 (CIDR -> IPv6 / int .)


state 51

    (24) prefix_rule -> bitORKeyword ( args . )

    )               shift and go to state 56


state 52

    (22) prefix_rule -> id ( args ) .

    ,               reduce using rule 22 (prefix_rule -> id ( args ) .)
    ORKeyword       reduce using rule 22 (prefix_rule -> id ( args ) .)
    NOTKeyword      reduce using rule 22 (prefix_rule -> id ( args ) .)
    id              reduce using rule 22 (prefix_rule -> id ( args ) .)
    bitANDKeyword   reduce using rule 22 (prefix_rule -> id ( args ) .)
    bitORKeyword    reduce using rule 22 (prefix_rule -> id ( args ) .)
    IPv6            reduce using rule 22 (prefix_rule -> id ( args ) .)
    IPv4            reduce using rule 22 (prefix_rule -> id ( args ) .)
    MAC             reduce using rule 22 (prefix_rule -> id ( args ) .)
    int             reduce using rule 22 (prefix_rule -> id ( args ) .)
    }               reduce using rule 22 (prefix_rule -> id ( args ) .)
    EQ              reduce using rule 22 (prefix_rule -> id ( args ) .)
    LT              reduce using rule 22 (prefix_rule -> id ( args ) .)
    GT              reduce using rule 22 (prefix_rule -> id ( args ) .)
    LTEQ            reduce using rule 22 (prefix_rule -> id ( args ) .)
    GTEQ            reduce using rule 22 (prefix_rule -> id ( args ) .)
    ML              reduce using rule 22 (prefix_rule -> id ( args ) .)
    MG              reduce using rule 22 (prefix_rule -> id ( args ) .)
    inKeyword       reduce using rule 22 (prefix_rule -> id ( args ) .)
    notinKeyword    reduce using rule 22 (prefix_rule -> id ( args ) .)


state 53

    (25) args -> arg , . args
    (25) args -> . arg , args
    (26) args -> .
    (27) arg -> . id
    (28) arg -> . IPv6
    (29) arg -> . IPv4
    (30) arg -> . CIDR
    (31) arg -> . MAC
    (32) arg -> . int
    (33) arg -> . prefix_rule
    (34) CIDR -> . IPv4 / int
    (35) CIDR -> . IPv6 / int
    (22) prefix_rule -> . id ( args )
    (23) prefix_rule -> . bitANDKeyword ( args )
    (24) prefix_rule -> . bitORKeyword ( args )

    )               reduce using rule 26 (args -> .)
    id              shift and go to state 45
    IPv6            shift and go to state 17
    IPv4            shift and go to state 5
    MAC             shift and go to state 8
    int             shift and go to state 19
    bitANDKeyword   shift and go to state 15
    bitORKeyword    shift and go to state 18

    arg                            shift and go to state 46
    prefix_rule                    shift and go to state 44
    CIDR                           shift and go to state 6
    args                           shift and go to state 57

state 54

    (7) opt_rule -> ORKeyword rule_or_not opt_rule .

    NOTKeyword      reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    id              reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    bitANDKeyword   reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    bitORKeyword    reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    IPv6            reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    IPv4            reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    MAC             reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    int             reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)
    }               reduce using rule 7 (opt_rule -> ORKeyword rule_or_not opt_rule .)


state 55

    (23) prefix_rule -> bitANDKeyword ( args ) .

    ,               reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    ORKeyword       reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    NOTKeyword      reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    id              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    bitANDKeyword   reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    bitORKeyword    reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    IPv6            reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    IPv4            reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    MAC             reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    int             reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    }               reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    EQ              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    LT              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    GT              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    LTEQ            reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    GTEQ            reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    ML              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    MG              reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    inKeyword       reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)
    notinKeyword    reduce using rule 23 (prefix_rule -> bitANDKeyword ( args ) .)


state 56

    (24) prefix_rule -> bitORKeyword ( args ) .

    ,               reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    ORKeyword       reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    NOTKeyword      reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    id              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    bitANDKeyword   reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    bitORKeyword    reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    IPv6            reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    IPv4            reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    MAC             reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    int             reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    }               reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    EQ              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    LT              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    GT              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    LTEQ            reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    GTEQ            reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    ML              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    MG              reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    inKeyword       reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)
    notinKeyword    reduce using rule 24 (prefix_rule -> bitORKeyword ( args ) .)


state 57

    (25) args -> arg , args .

    )               reduce using rule 25 (args -> arg , args .)

